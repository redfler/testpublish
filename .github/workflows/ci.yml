name: Python CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        # Make sure Python can find the modules
        python -m pytest tests/ --cov=code --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  publish-helm:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
    
    - name: Install Helm Dependencies
      run: |
        helm dep update ./charts/compute-service
      
    - name: Package Helm chart
      run: |
        mkdir -p .cr-release-packages
        helm package ./charts/compute-service --destination .cr-release-packages
        
    - name: Upload Helm chart
      uses: actions/upload-artifact@v3
      with:
        name: helm-chart
        path: .cr-release-packages/*.tgz
        retention-days: 5
        
    - name: Publish Helm chart
      # This is a placeholder for the actual publish command
      # In a real scenario, you might use chart-releaser or push to a Helm registry
      run: |
        echo "Publishing Helm chart..."
        
        # Example using chart-releaser (commented out for now)
        # curl -L https://github.com/helm/chart-releaser/releases/download/v1.5.0/chart-releaser_1.5.0_linux_amd64.tar.gz | tar xzf -
        # ./cr upload -o yourusername -r compute-service -p .cr-release-packages
        # ./cr index -o yourusername -r compute-service -p .cr-release-packages --push
        
        # Example using generic Helm registry (OCI)
        # helm registry login registry.example.com --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }}
        # helm push .cr-release-packages/compute-service-*.tgz oci://registry.example.com/charts 